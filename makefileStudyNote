We need a file called a makefile to tell make what to do. Most often, the makefile tells make how to compile and link a program.

1.Basic rule
	A simple makefile consists of “rules” with the following shape:

		target … : prerequisites …
        		recipe
        		…
        		…

		with target being the name of a file that is generated by a program or the name of an action to carry out,such as debug clean(phony targets);
		prerequisite being a file that is used as input to create the target;
		recipe being anction(command) that make carries out.
	
	For example:
		edit : main.o kbd.o command.o display.o \
       		       insert.o search.o files.o utils.o
       			cc -o edit main.o kbd.o command.o display.o \
                   		insert.o search.o files.o utils.o

		main.o : main.c defs.h
        		cc -c main.c
		kbd.o : kbd.c defs.h command.h
        		cc -c kbd.c
		command.o : command.c defs.h command.h
        		cc -c command.c
		display.o : display.c defs.h buffer.h
        		cc -c display.c
		insert.o : insert.c defs.h buffer.h
        		cc -c insert.c
		search.o : search.c defs.h buffer.h
        		cc -c search.c
		files.o : files.c defs.h buffer.h command.h
        		cc -c files.c
		utils.o : utils.c defs.h
        		cc -c utils.c
		clean :
        		rm edit main.o kbd.o command.o display.o \
           			insert.o search.o files.o utils.o

		#run make to create the executable file called edit.Meantime,it will generate these object files.
		#clean is not a file ,but a name of an action triggered to excecute the recipe.

	By default,make starts with the first target(default goal)

	Some special variable declaration:

		.PHONY				#declarify phony target
		.DEFAULT_GOAL			#declarify default target

	To simplify the structure,Variables are derived and there is a implicit rules for generating .0 file from .c file:
	Therefore,it becomes:

		objects = main.o kbd.o command.o display.o \
          		  insert.o search.o files.o utils.o

		edit : $(objects)
        		cc -o edit $(objects)
		
		kbd.o : defs.h command.h
		command.o : defs.h command.h
			...

		.PHONY : clean
		clean :
        		rm edit $(objects)

	When the objects of a makefile are created only by implicit rules, an alternative style of makefile is possible:
		bjects = main.o kbd.o command.o display.o \
          		 insert.o search.o files.o utils.o

		edit : $(objects)
        		cc -o edit $(objects)

		$(objects) : defs.h
		kbd.o command.o files.o : command.h
		display.o insert.o search.o files.o : buffer.h
	
2.Rule syntax and operator	
	
	blackslash(\):
			for recipe:add newline
			for non-recipe:space character and all whilespaces around the blackslash are condensed into one whitespace

	dollar sign($):reference

			$@:object file
			$^:all dependency files
			$<:first dependency file
			$?:list of dependency files fresher than object file
			$%:
			$+:all dependency files without repeating elements
			$*:
	
	semicolon(;):
			targets : prerequisites ; recipe
        			recipe	
	
	operator:
			x = foo
			y = $(x) bar
			x = xyz		
	+	:			#exact y is "xyz bar",instead of "foo var"
	:=	:			#excat y is "foo var",instead of "xyz bar"
	?=	:			#if var have never been valued,it has the same effect as ":=".Otherwise,it omit current operating.
	+=	:			#append value 
	
	
3.How make reads a Makefile

	Two distinct phases:
		The first phase read all the makefiles, included makefiles, etc. and internalizes all the variables and their values and implicit and explicit rules, and builds a dependency graph of all the targets and their prerequisites

		Secondly,make uses this internalized data to determine which targets need to be updated and run the recipes necessary to update them.
		
	Immediate and defer:
		If expansion happens in first phase,it is called immediated.
		If expansion does not immediately execute,it is called deffered.
	
	Left-hand variables are immediate,but right-hand var depend on satuation.
		immediate = deferred
		immediate ?= deferred
		immediate := immediate
		immediate ::= immediate
		immediate += deferred or immediate
		immediate != immediate
	
	Conditional Directives are parsed immediately.


Appendix:

	
	
